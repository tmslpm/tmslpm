/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/core/BufferCanvas.ts":
/*!**********************************!*\
  !*** ./src/core/BufferCanvas.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BufferCanvas = void 0;\nvar BufferCanvas = /** @class */ (function () {\n    function BufferCanvas() {\n        this._buffer = document.createElement(\"canvas\");\n        this.buffer.width = 32;\n        this.buffer.height = 32;\n        this._ctx = this.buffer.getContext(\"2d\");\n    }\n    BufferCanvas.prototype.draw = function (img, offsetX, offsetY, width, height, bufferWidth, bufferHeight) {\n        this.buffer.width = bufferWidth;\n        this.buffer.height = bufferHeight;\n        this._ctx.drawImage(img, offsetX, offsetY, width, height, 0, 0, this.buffer.width, this.buffer.height);\n    };\n    BufferCanvas.prototype.drawTile = function (image, tileX, tileY, tileWidth) {\n        this._ctx.drawImage(image, tileX * tileWidth, tileY * tileWidth);\n    };\n    BufferCanvas.prototype.clearTile = function (tileX, tileY, tileWidth) {\n        this._ctx.clearRect(tileX * tileWidth, tileY * tileWidth, tileWidth, tileWidth);\n    };\n    BufferCanvas.prototype.resize = function (width, height) {\n        var _this = this;\n        var copy = new Image();\n        copy.src = this.buffer.toDataURL();\n        copy.onload = function () {\n            _this.buffer.height = width;\n            _this.buffer.width = height;\n            _this.ctx.drawImage(copy, 0, 0);\n        };\n    };\n    Object.defineProperty(BufferCanvas.prototype, \"width\", {\n        set: function (v) {\n            this.buffer.width = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BufferCanvas.prototype, \"height\", {\n        set: function (v) {\n            this.buffer.height = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BufferCanvas.prototype, \"buffer\", {\n        get: function () {\n            return this._buffer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BufferCanvas.prototype, \"ctx\", {\n        get: function () {\n            return this._ctx;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BufferCanvas.prototype, \"canvas\", {\n        get: function () {\n            return this._buffer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return BufferCanvas;\n}());\nexports.BufferCanvas = BufferCanvas;\n\n\n//# sourceURL=webpack://tilesmap/./src/core/BufferCanvas.ts?");

/***/ }),

/***/ "./src/core/CanvasTilemap2D.ts":
/*!*************************************!*\
  !*** ./src/core/CanvasTilemap2D.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CanvasTilemap2D = void 0;\nvar CanvasTilemap2D = /** @class */ (function () {\n    function CanvasTilemap2D(htmlStringIdentifier, tileSize, tileMapSize) {\n        this._ignored = false;\n        this._onDraw = function () { return console.warn(\"not implemented, use setter onDraw()\"); };\n        // create canvas\n        this._canvas = document.createElement(\"canvas\");\n        var containerForTheCanvas = document.getElementById(htmlStringIdentifier);\n        containerForTheCanvas.appendChild(this._canvas);\n        // define property\n        this._ctx = this._canvas.getContext(\"2d\", { willReadFrequently: true });\n        this._tileWidth = tileSize;\n        this._tileMapLength = tileMapSize;\n        this._tileMapWidth = this.tileWidth * this.tileMapLength;\n        this._data = [];\n        this.updateSize();\n    }\n    CanvasTilemap2D.prototype.moussePositionToCoordinate = function (ev) {\n        var rect = this.canvas.getBoundingClientRect();\n        var realSize = rect.width / this.tileMapLength;\n        return {\n            x: Math.floor((ev.clientX - rect.left) / realSize),\n            y: Math.floor((ev.clientY - rect.top) / realSize)\n        };\n    };\n    CanvasTilemap2D.prototype.draw = function () {\n        this._onDraw();\n    };\n    CanvasTilemap2D.prototype.drawGrid = function () {\n        this._ctx.strokeStyle = \"black\";\n        this._ctx.lineWidth = 1;\n        for (var x = 0; x <= this.tileMapWidth; x += this.tileWidth) {\n            this._ctx.moveTo(x, 0);\n            this._ctx.lineTo(x, this.tileMapWidth);\n            this._ctx.moveTo(0, x);\n            this._ctx.lineTo(this.tileMapWidth, x);\n        }\n        this._ctx.stroke();\n    };\n    /**\n     * mode: 0, 1, 2, 3, 4, 5, 6, 7\n     * _______________________________________________\n     * - 0 = start left top, left to right\n     * ```\n     *   | 0 | 1 | 2 |\n     *   -------------\n     *   | 3 | 4 | 5 |\n     *   -------------\n     *   | 6 | 7 | 8 |\n     * ```\n     * _______________________________________________\n     *\n     * - 1 = start left top, and top to bottom\n     * ```\n     *   | 0 | 3 | 6 |\n     *   -------------\n     *   | 1 | 4 | 7 |\n     *   -------------\n     *   | 2 | 5 | 8 |\n     * ```\n     * _______________________________________________\n     *\n     * - 2 = start right top, and right to left\n     * ```\n     *   | 2 | 1 | 0 |\n     *   -------------\n     *   | 5 | 4 | 3 |\n     *   -------------\n     *   | 8 | 7 | 6 |\n     * ```\n     * _______________________________________________\n     *\n     * - 3 = start right top, and top to bottom\n     * ```\n     *   | 6 | 3 | 0 |\n     *   -------------\n     *   | 7 | 4 | 1 |\n     *   -------------\n     *   | 8 | 5 | 2 |\n     * ```\n     * _______________________________________________\n     *\n     * - 4 = start left bottom, and left to right\n     * ```\n     *   | 6 | 7 | 8 |\n     *   -------------\n     *   | 3 | 4 | 5 |\n     *   -------------\n     *   | 0 | 1 | 2 |\n     * ```\n     * _______________________________________________\n     *\n     * - 5 = start left bottom, and top to bottom\n     * ```\n     *   | 2 | 5 | 8 |\n     *   -------------\n     *   | 1 | 4 | 7 |\n     *   -------------\n     *   | 0 | 3 | 6 |\n     * ```\n     * _______________________________________________\n     *\n     * - 6 = start right bottom, and right top left\n     * ```\n     *   | 8 | 7 | 6 |\n     *   -------------\n     *   | 5 | 4 | 3 |\n     *   -------------\n     *   | 2 | 1 | 0 |\n     * ```\n     * _______________________________________________\n     *\n     * - 7 = start right bottom, and bottom to top\n     * ```\n     *   | 8 | 5 | 2 |\n     *   -------------\n     *   | 7 | 4 | 1 |\n     *   -------------\n     *   | 6 | 3 | 0 |\n     * ```\n     * @param {number} mode - specify the mode\n     */\n    CanvasTilemap2D.prototype.drawTileIndex = function (modeOrderTileIndex) {\n        var funcGetIndex = this.getDrawTileIndexByMode(modeOrderTileIndex);\n        this.ctx.font = \"15px Arial\";\n        for (var x = 0; x <= this.tileMapWidth; x += this.tileWidth) {\n            for (var y = 0; y <= this.tileMapWidth; y += this.tileWidth) {\n                var tileX = Math.floor(x / this.tileWidth);\n                var tileY = Math.floor(y / this.tileWidth);\n                this.drawTextOnTile(funcGetIndex(tileX, tileY).toString(), x, y);\n            }\n        }\n    };\n    CanvasTilemap2D.prototype.getDrawTileIndexByMode = function (modeOrderTileIndex) {\n        var _this = this;\n        var totalTile = (this.tileMapLength * this.tileMapLength - 1);\n        switch (modeOrderTileIndex) {\n            case 0:\n                return function (tX, tY) { return tX + (tY * _this.tileMapLength); };\n            case 1:\n                return function (tX, tY) { return tY + (tX * _this.tileMapLength); };\n            case 2:\n                return function (tX, tY) { return totalTile - (((_this.tileMapLength - tY) * _this.tileMapLength) - (_this.tileMapLength - tX)); };\n            case 3:\n                return function (tX, tY) { return ((_this.tileMapLength - tX) * _this.tileMapLength) - (_this.tileMapLength - tY); };\n            case 4:\n                return function (tX, tY) { return ((_this.tileMapLength - tY) * _this.tileMapLength) - (_this.tileMapLength - tX); };\n            case 5:\n                return function (tX, tY) { return totalTile - (((_this.tileMapLength - tX) * _this.tileMapLength) - (_this.tileMapLength - tY)); };\n            case 6:\n                return function (tX, tY) { return totalTile - (tX + (tY * _this.tileMapLength)); };\n            case 7:\n                return function (tX, tY) { return totalTile - (tY + (tX * _this.tileMapLength)); };\n            default:\n                console.error(\"not found mode: \".concat(modeOrderTileIndex, \", default mode used\"));\n                return function (tX, tY) { return tX + (tY * _this.tileMapLength); };\n        }\n    };\n    CanvasTilemap2D.prototype.drawTextOnTile = function (text, x, y) {\n        // for center text\n        var numberBound = this.ctx.measureText(text);\n        var numberFontHeight = numberBound.fontBoundingBoxAscent + numberBound.fontBoundingBoxDescent;\n        var textX = (x + (this.tileWidth / 2)) - ((numberBound.width) / 2);\n        var textY = (y + this.tileWidth) - (numberFontHeight / 1.5);\n        var backrgoundPadding = 2;\n        var backgroundX = textX - backrgoundPadding;\n        var backgroundY = textY - (numberFontHeight / 1.25) - backrgoundPadding;\n        var backgroundWidth = numberBound.width + (backrgoundPadding * 2);\n        var backgroundHeight = numberFontHeight + (backrgoundPadding * 2);\n        this.ctx.save();\n        this.ctx.fillStyle = \"rgba(255, 255, 255, 0.3)\";\n        this.ctx.fillRect(backgroundX, backgroundY, backgroundWidth, backgroundHeight);\n        this.ctx.restore();\n        // draw text\n        this.ctx.fillText(text, textX, textY);\n    };\n    CanvasTilemap2D.prototype.drawSelector = function (tileX, tileY) {\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = \"red\";\n        this.ctx.lineWidth = 2;\n        this.ctx.rect(tileX * this.tileWidth, tileY * this.tileWidth, this.tileWidth, this.tileWidth);\n        this._ctx.stroke();\n    };\n    CanvasTilemap2D.prototype.drawImage = function (image, tileX, tileY) {\n        this._ctx.drawImage(image, tileX * this.tileWidth, tileY * this.tileWidth);\n    };\n    CanvasTilemap2D.prototype.clear = function () {\n        this._ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    };\n    CanvasTilemap2D.prototype.clearTile = function (tileX, tileY) {\n        this._ctx.clearRect(tileX * this.tileWidth, tileY * this.tileWidth, this.tileWidth, this.tileWidth);\n    };\n    CanvasTilemap2D.prototype.updateSize = function () {\n        this._tileMapWidth = this._tileWidth * this._tileMapLength;\n        this._canvas.width = this._tileMapWidth;\n        this._canvas.height = this._tileMapWidth;\n    };\n    CanvasTilemap2D.prototype.toDataURL = function () {\n        return this._canvas.toDataURL();\n    };\n    CanvasTilemap2D.prototype.copy = function (callbackFn) {\n        var copy = new Image();\n        copy.src = this.canvas.toDataURL();\n        copy.onload = function () { return callbackFn(copy); };\n    };\n    // D a t a \n    CanvasTilemap2D.prototype.storeTile = function (tileX, tileY, value) {\n        var hasColumX = this._data[tileX];\n        // exist ?\n        if (!hasColumX) {\n            this._data[tileX] = [];\n        }\n        this._data[tileX][tileY] = value;\n    };\n    CanvasTilemap2D.prototype.getTileId = function (x, y) {\n        if (!this._data[x] || this._data[x][y] == undefined) {\n            this.parseGrid();\n        }\n        return this._data[x][y];\n    };\n    CanvasTilemap2D.prototype.parseGrid = function () {\n        var newData = [];\n        for (var x = 0; x < this.tileMapLength; x++) {\n            newData[x] = [];\n            // has no col\n            if (this._data[x] == undefined) {\n                for (var y = 0; y < this.tileMapLength; y++) {\n                    newData[x][y] = -1; // set no tile data\n                }\n            }\n            // has col\n            else {\n                for (var y = 0; y < this.tileMapLength; y++) {\n                    newData[x][y] = this._data[x][y] == undefined ? -1 : this._data[x][y];\n                }\n            }\n        }\n        // override old data\n        this._data = newData;\n    };\n    CanvasTilemap2D.prototype.convert = function () {\n        this.parseGrid();\n        // rotate \n        var v = [];\n        for (var x = 0; x < this.tileMapLength; x++)\n            v[x] = [];\n        for (var x = 0; x < this.tileMapLength; x++)\n            for (var y = 0; y < this.tileMapLength; y++)\n                v[y].push(this._data[x][y]);\n        return v;\n    };\n    CanvasTilemap2D.prototype.toJavaCode = function () {\n        var ouputData = this.convert();\n        var str = \"<br>\";\n        str += \"int[][] TEMPLATE = {<br>\";\n        ouputData.forEach(function (v, i) {\n            str += \"  { \".concat(v.join(\", \"), \" }\").concat(i + 1 == ouputData.length ? \"\" : \",\", \"<br>\");\n        });\n        str += \"};\";\n        return str;\n    };\n    CanvasTilemap2D.prototype.export = function (tileWidth) {\n        this.convert();\n        var data = {\n            tile_width: tileWidth,\n            tilemap_data: this._data\n        };\n        return JSON.stringify(data);\n    };\n    CanvasTilemap2D.prototype.import = function (v) {\n        var parsedData = JSON.parse(v);\n        this._data = parsedData.tilemap_data;\n        return parsedData.tile_width;\n    };\n    Object.defineProperty(CanvasTilemap2D.prototype, \"onDraw\", {\n        // S e t t e r\n        set: function (v) {\n            this._onDraw = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CanvasTilemap2D.prototype, \"setTileWidth\", {\n        set: function (v) {\n            this._tileWidth = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CanvasTilemap2D.prototype, \"setTileMapLength\", {\n        set: function (v) {\n            this._tileMapLength = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CanvasTilemap2D.prototype, \"setIgnored\", {\n        set: function (v) {\n            this._ignored = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CanvasTilemap2D.prototype, \"tileWidth\", {\n        // G e t t e r\n        get: function () {\n            return this._tileWidth;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CanvasTilemap2D.prototype, \"tileMapLength\", {\n        // in number sprite\n        get: function () {\n            return this._tileMapLength;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CanvasTilemap2D.prototype, \"tileMapWidth\", {\n        // in pixel\n        get: function () {\n            return this._tileMapWidth;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CanvasTilemap2D.prototype, \"canvas\", {\n        get: function () {\n            return this._canvas;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CanvasTilemap2D.prototype, \"ctx\", {\n        get: function () {\n            return this._ctx;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(CanvasTilemap2D.prototype, \"ignored\", {\n        get: function () {\n            return this._ignored;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return CanvasTilemap2D;\n}());\nexports.CanvasTilemap2D = CanvasTilemap2D;\n\n\n//# sourceURL=webpack://tilesmap/./src/core/CanvasTilemap2D.ts?");

/***/ }),

/***/ "./src/core/MenuEditor.ts":
/*!********************************!*\
  !*** ./src/core/MenuEditor.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MenuEditor = void 0;\nvar MenuEditor = /** @class */ (function () {\n    function MenuEditor(htmlStringIdentifier) {\n        this.menuContainer = document.getElementById(htmlStringIdentifier);\n        this.menuContainer.innerHTML = \"\";\n    }\n    MenuEditor.prototype.addLargeButton = function (text, onClickCallback) {\n        return this.addButton(text, onClickCallback, true);\n    };\n    MenuEditor.prototype.addButtonIcon = function (pathIcon, description, size, classGroup, onClickCallback, selected) {\n        if (selected === void 0) { selected = false; }\n        var btn = document.createElement(\"img\");\n        btn.classList.add(\"buttonIcon\", classGroup);\n        if (selected)\n            btn.classList.add(\"selected\");\n        btn.width = size;\n        btn.height = size;\n        btn.src = pathIcon;\n        btn.alt = description;\n        btn.onclick = function () { return onClickCallback(btn); };\n        this.menuContainer.appendChild(btn);\n        return btn;\n    };\n    MenuEditor.prototype.addButton = function (text, onClickCallback, isLarge) {\n        if (isLarge === void 0) { isLarge = false; }\n        var wrapperBtn = document.createElement(\"div\");\n        wrapperBtn.className = \"wrapperElement\";\n        wrapperBtn.style.width = isLarge ? \"100%\" : \"50%\";\n        var btn = document.createElement(\"button\");\n        btn.innerText = text;\n        btn.onclick = function () { return onClickCallback(btn); };\n        wrapperBtn.appendChild(btn);\n        this.menuContainer.appendChild(wrapperBtn);\n        return btn;\n    };\n    MenuEditor.prototype.addBtnFile = function (text, isLarge, onChangeCallback) {\n        if (isLarge === void 0) { isLarge = false; }\n        var hiddenInput = document.createElement(\"input\");\n        hiddenInput.type = \"file\";\n        hiddenInput.style.visibility = \"hidden\";\n        hiddenInput.style.height = \"0px\";\n        hiddenInput.style.position = \"absolute\";\n        hiddenInput.onchange = function (_) {\n            onChangeCallback(hiddenInput.files);\n            hiddenInput.value = null;\n        };\n        this.menuContainer.appendChild(hiddenInput);\n        var btn = this.addButton(text, function () { return hiddenInput.click(); }, isLarge);\n        return btn;\n    };\n    MenuEditor.prototype.addInputNumber = function (text, initialValue, min, max, step, onChangeCallback) {\n        var input = this.addInput(text, \"number\", initialValue.toString(), onChangeCallback);\n        input.min = min.toString();\n        input.max = max.toString();\n        input.step = step.toString();\n        return input;\n    };\n    MenuEditor.prototype.addInput = function (text, type, initialValue, onChangeCallback) {\n        if (type === void 0) { type = \"text\"; }\n        var wrapperInput = document.createElement(\"div\");\n        wrapperInput.className = \"wrapperElement\";\n        var label = document.createElement(\"div\");\n        label.innerHTML = \"<div>\".concat(text, \":</div>\");\n        label.classList.add(\"labelInput\");\n        wrapperInput.appendChild(label);\n        var input = document.createElement(\"input\");\n        input.type = type;\n        input.value = initialValue;\n        input.onchange = function () { return onChangeCallback(input.value); };\n        wrapperInput.appendChild(input);\n        this.menuContainer.appendChild(wrapperInput);\n        return input;\n    };\n    MenuEditor.prototype.addSubMenu = function (text) {\n        var _this = this;\n        var wrapperContent = document.createElement(\"div\");\n        wrapperContent.className = \"wrapperElement\";\n        var subMenuClass = \"submenu\";\n        var identifier = \"sub_menu_editor_\" + this.menuContainer.querySelectorAll(\".\".concat(subMenuClass)).length;\n        var wrapperSubMenu = document.createElement(\"div\");\n        wrapperSubMenu.id = identifier;\n        wrapperSubMenu.classList.add(subMenuClass, \"wrapperSubmenu\");\n        wrapperSubMenu.style.display = \"none\";\n        this.addLargeButton(text, function () {\n            var v = wrapperSubMenu.style.display == \"block\" ? \"none\" : \"block\";\n            _this.menuContainer.querySelectorAll(\".\".concat(subMenuClass)).forEach(function (v) { return v.style.display = \"none\"; });\n            wrapperSubMenu.style.display = v;\n        });\n        wrapperContent.appendChild(wrapperSubMenu);\n        this.menuContainer.appendChild(wrapperContent);\n        return new MenuEditor(identifier);\n    };\n    MenuEditor.prototype.appendOther = function (element) {\n        var wrapperInput = document.createElement(\"div\");\n        wrapperInput.className = \"wrapperElement\";\n        wrapperInput.appendChild(element);\n        this.menuContainer.appendChild(wrapperInput);\n    };\n    MenuEditor.prototype.appendEmptyWrapper = function (htmlStringIdentifier) {\n        var wrapperInput = document.createElement(\"div\");\n        wrapperInput.className = \"wrapperElement\";\n        wrapperInput.style.position = \"relative\";\n        wrapperInput.id = htmlStringIdentifier;\n        this.menuContainer.appendChild(wrapperInput);\n    };\n    return MenuEditor;\n}());\nexports.MenuEditor = MenuEditor;\n\n\n//# sourceURL=webpack://tilesmap/./src/core/MenuEditor.ts?");

/***/ }),

/***/ "./src/core/OverlayHTML.ts":
/*!*********************************!*\
  !*** ./src/core/OverlayHTML.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Overlay = void 0;\nvar Overlay = /** @class */ (function () {\n    function Overlay(htmlStringIdentifier) {\n        var _this = this;\n        this._overlay = document.getElementById(htmlStringIdentifier);\n        this._overlay.style.display = \"none\";\n        var btnClose = this._overlay.querySelector(\".btnCloseOverlay\");\n        if (btnClose) {\n            btnClose.onclick = function () { return _this._overlay.style.display = \"none\"; };\n        }\n        else {\n            throw new Error(\"NullPointerException: querySelection return null, add class .btnCloseOverlay to button or other\");\n        }\n    }\n    Overlay.prototype.onOpenClose = function (onOpenCallback) {\n        if (this._overlay.style.display == \"none\") {\n            onOpenCallback();\n            this._overlay.style.display = \"block\";\n        }\n        else {\n            this._overlay.style.display = \"none\";\n        }\n    };\n    return Overlay;\n}());\nexports.Overlay = Overlay;\n\n\n//# sourceURL=webpack://tilesmap/./src/core/OverlayHTML.ts?");

/***/ }),

/***/ "./src/core/TilemapLayer.ts":
/*!**********************************!*\
  !*** ./src/core/TilemapLayer.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TilemapLayer = void 0;\nvar TilemapLayer = /** @class */ (function () {\n    function TilemapLayer() {\n        this._layers = [];\n        this._currentIndex = 0;\n    }\n    TilemapLayer.prototype.init = function () {\n        this._layers = [];\n        this._currentIndex = 0;\n    };\n    TilemapLayer.prototype.foreach = function (callbackfn, thisArg) {\n        this.layers.forEach(callbackfn);\n    };\n    TilemapLayer.prototype.add = function (layer, callbackfn) {\n        if (callbackfn === void 0) { callbackfn = function () { }; }\n        layer.canvas.style.position = \"absolute\";\n        this.layers.push(layer);\n        callbackfn(layer, this.layers);\n        return layer;\n    };\n    TilemapLayer.prototype.addAt = function (idx, layer, callbackfn) {\n        if (callbackfn === void 0) { callbackfn = function () { }; }\n        layer.canvas.style.position = \"absolute\";\n        this.layers.splice(idx, 0, layer);\n        callbackfn(layer, this.layers);\n        return layer;\n    };\n    TilemapLayer.prototype.current = function () {\n        return this.layers[this.currentIndex];\n    };\n    TilemapLayer.prototype.export = function () {\n        var data = {};\n        this.foreach(function (layer, i) {\n            if (!layer.ignored) {\n                layer.convert();\n                data[\"layer_\" + i] = {\n                    tile_width: layer.tileWidth,\n                    data: layer._data\n                };\n            }\n        });\n        return JSON.stringify(data);\n    };\n    TilemapLayer.prototype.get = function (index) {\n        return this.layers[index];\n    };\n    TilemapLayer.prototype.isCurrentLayerSelected = function (i) {\n        return i === this.currentIndex;\n    };\n    Object.defineProperty(TilemapLayer.prototype, \"currentIndex\", {\n        get: function () {\n            return this._currentIndex;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TilemapLayer.prototype, \"layers\", {\n        get: function () {\n            return this._layers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return TilemapLayer;\n}());\nexports.TilemapLayer = TilemapLayer;\n\n\n//# sourceURL=webpack://tilesmap/./src/core/TilemapLayer.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar CanvasTilemap2D_1 = __webpack_require__(/*! ./core/CanvasTilemap2D */ \"./src/core/CanvasTilemap2D.ts\");\nvar BufferCanvas_1 = __webpack_require__(/*! ./core/BufferCanvas */ \"./src/core/BufferCanvas.ts\");\nvar OverlayHTML_1 = __webpack_require__(/*! ./core/OverlayHTML */ \"./src/core/OverlayHTML.ts\");\nvar MenuEditor_1 = __webpack_require__(/*! ./core/MenuEditor */ \"./src/core/MenuEditor.ts\");\nvar TilemapLayer_1 = __webpack_require__(/*! ./core/TilemapLayer */ \"./src/core/TilemapLayer.ts\");\nvar TILEMAP_MODE = {\n    tileWidth: 32,\n    mapLength: 50,\n    chunkSize: 50\n};\nvar ATLAS_MODE = {\n    tileWidth: 32,\n    mapLength: 8,\n    drawGrid: true,\n    drawIndexOrder: true,\n    modeDrawOrderIndex: 0,\n    currIndexTileSelected: 0,\n    coordinateTileSelected: {\n        x: 0,\n        y: 0\n    }\n};\nvar PAINT_MODE = {\n    NORMAL: 0,\n    FILL: 1,\n    SELECTION: 2,\n    PIPETTE: 3,\n    DELETE: 4,\n    current: 0,\n    previous: 0,\n};\n// - - - - - - - - - - - - - - - - - - -\n// T I L E M A P\nvar BUFFER_ONE_TILE = new BufferCanvas_1.BufferCanvas();\nvar TILEMAP_LAYERS = new TilemapLayer_1.TilemapLayer();\nTILEMAP_LAYERS.add(new CanvasTilemap2D_1.CanvasTilemap2D(\"tilemap\", TILEMAP_MODE.tileWidth, TILEMAP_MODE.mapLength), function (layer) {\n    layer.onDraw = function () { };\n});\nvar TILEMAP_SELECTOR_AREA = TILEMAP_LAYERS.add(new CanvasTilemap2D_1.CanvasTilemap2D(\"tilemap\", TILEMAP_MODE.tileWidth, TILEMAP_MODE.mapLength), function (layer) {\n    layer.onDraw = function () { };\n});\nTILEMAP_LAYERS.add(new CanvasTilemap2D_1.CanvasTilemap2D(\"tilemap\", TILEMAP_MODE.tileWidth, TILEMAP_MODE.mapLength), function (gridLayer) {\n    gridLayer.setIgnored = true;\n    gridLayer.onDraw = function () { return gridLayer.drawGrid(); };\n    var mouseIsDown = false;\n    var mouseIsEnter = false;\n    var lastDownMouseTileCoordinate = { x: 0, y: 0 };\n    gridLayer.canvas.onmouseenter = function (e) {\n        mouseIsEnter = true;\n    };\n    gridLayer.canvas.onmouseleave = function (e) {\n        mouseIsEnter = false;\n        mouseIsDown = false;\n    };\n    gridLayer.canvas.onmousedown = function (e) {\n        mouseIsDown = true;\n        lastDownMouseTileCoordinate = gridLayer.moussePositionToCoordinate(e);\n        // PAIN NORMAL\n        if (PAINT_MODE.current === PAINT_MODE.NORMAL) {\n            var seletecdLayer = TILEMAP_LAYERS.current();\n            var tilePos = gridLayer.moussePositionToCoordinate(e);\n            seletecdLayer.drawImage(BUFFER_ONE_TILE.canvas, tilePos.x, tilePos.y);\n            seletecdLayer.storeTile(tilePos.x, tilePos.y, ATLAS_MODE.currIndexTileSelected);\n        }\n        // PAIN PIPETTE\n        else if (PAINT_MODE.current === PAINT_MODE.PIPETTE) {\n            var seletecdLayer = TILEMAP_LAYERS.current();\n            var tilePos = gridLayer.moussePositionToCoordinate(e);\n            var tileID = seletecdLayer.getTileId(tilePos.x, tilePos.y);\n            selectAtlasTileByIndex(tileID);\n            selectPreviousMode();\n        }\n        // PAIN FILL\n        else if (PAINT_MODE.current === PAINT_MODE.FILL) {\n            var seletecdLayer_1 = TILEMAP_LAYERS.current();\n            var tilePos = gridLayer.moussePositionToCoordinate(e);\n            var startTileID_1 = seletecdLayer_1.getTileId(tilePos.x, tilePos.y);\n            if (startTileID_1 === ATLAS_MODE.currIndexTileSelected)\n                return; // same\n            // Screen data\n            var screenData_1 = seletecdLayer_1._data;\n            var floodFill_1 = function (x, y, row, col) {\n                if (x < 0\n                    || x >= row\n                    || y < 0\n                    || y >= col\n                    || screenData_1[x][y] != startTileID_1) {\n                    return;\n                }\n                seletecdLayer_1.drawImage(BUFFER_ONE_TILE.canvas, x, y);\n                screenData_1[x][y] = ATLAS_MODE.currIndexTileSelected;\n                setTimeout(function () {\n                    floodFill_1(x - 1, y, row, col); // l \n                    floodFill_1(x + 1, y, row, col); // r \n                    floodFill_1(x, y + 1, row, col); // t \n                    floodFill_1(x, y - 1, row, col); // b\n                }, 25);\n            };\n            floodFill_1(tilePos.x, tilePos.y, screenData_1.length, screenData_1.length);\n        }\n    };\n    gridLayer.canvas.onmouseup = function (e) {\n        mouseIsDown = false;\n        /// PAINT SELECTION\n        if (PAINT_MODE.current === PAINT_MODE.SELECTION) {\n            var seletecdLayer_2 = TILEMAP_LAYERS.current();\n            drawPainSelection(lastDownMouseTileCoordinate, gridLayer.moussePositionToCoordinate(e), function (x, y) {\n                seletecdLayer_2.drawImage(BUFFER_ONE_TILE.canvas, x, y);\n                seletecdLayer_2.storeTile(x, y, ATLAS_MODE.currIndexTileSelected);\n            });\n            TILEMAP_SELECTOR_AREA.clear();\n        }\n    };\n    gridLayer.canvas.onmousemove = function (e) {\n        if (mouseIsEnter && mouseIsDown) {\n            // PAINT NORMAL\n            if (PAINT_MODE.current === PAINT_MODE.NORMAL) {\n                var seletecdLayer = TILEMAP_LAYERS.current();\n                var tilePos = gridLayer.moussePositionToCoordinate(e);\n                seletecdLayer.drawImage(BUFFER_ONE_TILE.canvas, tilePos.x, tilePos.y);\n                seletecdLayer.storeTile(tilePos.x, tilePos.y, ATLAS_MODE.currIndexTileSelected);\n            }\n            // PAINT DELETE\n            else if (PAINT_MODE.current === PAINT_MODE.DELETE) {\n                var seletecdLayer = TILEMAP_LAYERS.current();\n                var tilePos = gridLayer.moussePositionToCoordinate(e);\n                seletecdLayer.clearTile(tilePos.x, tilePos.y);\n                seletecdLayer.storeTile(tilePos.x, tilePos.y, -1);\n            }\n            /// PAINT SELECTION\n            else if (PAINT_MODE.current === PAINT_MODE.SELECTION) {\n                TILEMAP_SELECTOR_AREA.clear();\n                drawPainSelection(lastDownMouseTileCoordinate, gridLayer.moussePositionToCoordinate(e), function (x, y) {\n                    TILEMAP_SELECTOR_AREA.drawSelector(x, y);\n                });\n            }\n        }\n    };\n});\nTILEMAP_LAYERS.foreach(function (layer) { return layer.draw(); });\n// - - - - - - - - - - - - - - - - - - -\n// M e n u - A n d - O v e r l a y\nvar OUTPUT_OVERLAY = new OverlayHTML_1.Overlay(\"overlayOutput\");\nvar DEBUG_DATA = document.getElementById(\"debugData\");\nvar MENU = new MenuEditor_1.MenuEditor(\"menu\");\n// - - - - - - - - - - - - - - - - - - -\n// S U B - M E N U >> F I L E\nvar MENU_FILE = MENU.addSubMenu(\"file\");\n// |>> I M P O R T\nMENU_FILE.addBtnFile(\"import\", false, function (f) { return importTilemap(f); });\n// |>> E X P O R T\nMENU_FILE.addButton(\"export\", function () { return exportTilemap(); });\n// |>> O U T P U T\nMENU_FILE.addLargeButton(\"ouput\", function () { return OUTPUT_OVERLAY.onOpenClose(function () { return DEBUG_DATA.innerHTML = TILEMAP_LAYERS.current().toJavaCode(); }); });\n// - - - - - - - - - - - - - - - - - - -\n// S U B - M E N U >> T I L E M A P\nvar MENU_TILEMAP = MENU.addSubMenu(\"config tilemap\");\n// |>> T I L E M A P - S I Z E\nMENU_TILEMAP.addInputNumber(\"set size map\", TILEMAP_MODE.mapLength, 1, 100000, 1, function (v) { return resizeTilemapWidth(v); });\n// |>> T I L E - S I Z E\nMENU_TILEMAP.addInputNumber(\"set size sprite\", TILEMAP_MODE.tileWidth, 16, 1000, 16, function (v) { return resizeTilemapTileSize(v); });\n// |>> T I L E M A P - C H U N K - S I Z E\nMENU_TILEMAP.addInputNumber(\"set chunk size\", TILEMAP_MODE.chunkSize, 1, 100, 1, function (v) { return resizeTilemaChunk(v); });\n// - - - - - - - - - - - - - - - - - - -\n// S U B - M E N U >> A T L A S\nvar MENU_ATLAS = MENU.addSubMenu(\"config tileset\");\n// |>> L O A D - A T L AS\nMENU_ATLAS.addBtnFile(\"load tileset image\", true, function (f) { return loadAtlasImageByFile(f); });\n// |>> T I L E - S I Z E\nMENU_ATLAS.addInputNumber(\"sprite size\", ATLAS_MODE.tileWidth, 16, 1000, 16, function (v) { return resizeAtlasTileSize(v); });\n// |>> S H O W - G R I D\nMENU_ATLAS.addButton(\"draw grid\", function () { return enableDisabledDrawGrid(); });\n// |>> S H O W - O R D E R\nMENU_ATLAS.addButton(\"draw index\", function () { return enableDisabledDrawOrderIdx(); });\n// |>> O R D E R - T I L E - I N D E X\nMENU_ATLAS.addLargeButton(\"set order tileset index\", function () { return changeAtlasModeDrawOrderIdx(); });\n// - - - - - - - - - - - - - - - - - - -\n// M E N U - I C O N - P A I N T - M O D E\naddButtonPaintModeToMenu(\"google_icon_pencil.png\", \"\", PAINT_MODE.NORMAL);\naddButtonPaintModeToMenu(\"google_icon_fill.png\", \"\", PAINT_MODE.FILL);\naddButtonPaintModeToMenu(\"google_icon_selection.png\", \"\", PAINT_MODE.SELECTION);\naddButtonPaintModeToMenu(\"google_icon_pipette.png\", \"\", PAINT_MODE.PIPETTE);\naddButtonPaintModeToMenu(\"google_icon_delete.png\", \"\", PAINT_MODE.DELETE);\n// - - - - - - - - - - - - - - - - - - -\n// C A N V A S - S P R I T E - A T L A S \nMENU.appendEmptyWrapper(\"wrapperCurrentAtlas\");\nvar ATLAS_LAYERS = new TilemapLayer_1.TilemapLayer();\nvar ATLAS_LAYER = ATLAS_LAYERS.add(new CanvasTilemap2D_1.CanvasTilemap2D(\"wrapperCurrentAtlas\", ATLAS_MODE.tileWidth, ATLAS_MODE.mapLength), function (atlasLayer) {\n    atlasLayer.canvas.style.width = \"100%\";\n    atlasLayer.onDraw = function () { };\n});\nvar ATLAS_IDX_LAYER = ATLAS_LAYERS.add(new CanvasTilemap2D_1.CanvasTilemap2D(\"wrapperCurrentAtlas\", ATLAS_MODE.tileWidth, ATLAS_MODE.mapLength), function (indexLayer) {\n    indexLayer.canvas.style.width = \"100%\";\n    indexLayer.setIgnored = true;\n    indexLayer.onDraw = function () {\n        indexLayer.clear();\n        if (ATLAS_MODE.drawIndexOrder)\n            indexLayer.drawTileIndex(ATLAS_MODE.modeDrawOrderIndex);\n    };\n});\nvar ATLAS_GRID_LAYER = ATLAS_LAYERS.add(new CanvasTilemap2D_1.CanvasTilemap2D(\"wrapperCurrentAtlas\", ATLAS_MODE.tileWidth, ATLAS_MODE.mapLength), function (gridLayer) {\n    gridLayer.canvas.style.width = \"100%\";\n    gridLayer.setIgnored = true;\n    gridLayer.onDraw = function () {\n        gridLayer.clear();\n        if (ATLAS_MODE.drawGrid)\n            gridLayer.drawGrid();\n    };\n});\nvar ATLAS_SELECTOR_LAYER = ATLAS_LAYERS.add(new CanvasTilemap2D_1.CanvasTilemap2D(\"wrapperCurrentAtlas\", ATLAS_MODE.tileWidth, ATLAS_MODE.mapLength), function (selectorLayer) {\n    selectorLayer.canvas.style.width = \"100%\";\n    selectorLayer.setIgnored = true;\n    selectorLayer.onDraw = function () {\n        selectorLayer.clear();\n        selectorLayer.drawSelector(ATLAS_MODE.coordinateTileSelected.x, ATLAS_MODE.coordinateTileSelected.y);\n    };\n    selectorLayer.canvas.onclick = function (e) { return selectAtlasTileByCoordinate(selectorLayer.moussePositionToCoordinate(e)); };\n});\nATLAS_LAYERS.foreach(function (layer) { return layer.draw(); });\nloadAtlasImageByUrl(\"assets/tileset_0.png\");\n/*----------------------------------------------------------*/\n/* paint mode */\nfunction addButtonPaintModeToMenu(iconName, description, idPaintMode) {\n    var v = MENU.addButtonIcon(\"assets/icon/\".concat(iconName), description, 32, \"paint_mode\", function (btn) {\n        document.querySelectorAll(\".paint_mode\").forEach(function (v) { return v.classList.remove(\"selected\"); });\n        btn.classList.add(\"selected\");\n        PAINT_MODE.previous = PAINT_MODE.current;\n        PAINT_MODE.current = idPaintMode;\n    }, PAINT_MODE.current == idPaintMode);\n    v.id = \"paint_mode_\".concat(idPaintMode);\n}\n;\n/* paint mode */\nfunction selectPreviousMode() {\n    document.querySelectorAll(\".paint_mode\")\n        .forEach(function (v) { return v.classList.remove(\"selected\"); });\n    var btn = document.getElementById(\"paint_mode_\".concat(PAINT_MODE.previous));\n    btn.classList.add(\"selected\");\n    PAINT_MODE.current = PAINT_MODE.previous;\n}\n/* paint mode */\nfunction drawPainSelection(firstPos, secondPos, draw) {\n    var flagX = firstPos.x < secondPos.x;\n    var flagY = firstPos.y < secondPos.y;\n    secondPos.x = flagX ? secondPos.x + 1 : secondPos.x - 1;\n    secondPos.y = flagY ? secondPos.y + 1 : secondPos.y - 1;\n    var ix = flagX ? 1 : -1;\n    var iy = flagY ? 1 : -1;\n    var ivx = function (i) { return flagX ? i < secondPos.x : i > secondPos.x; };\n    var ivy = function (i) { return flagY ? i < secondPos.y : i > secondPos.y; };\n    for (var x = firstPos.x; ivx(x); x += ix) {\n        for (var y = firstPos.y; ivy(y); y += iy) {\n            draw(x, y);\n        }\n    }\n}\n/*----------------------------------------------------------*/\n/* atlas */\nfunction loadAtlasImageByFile(files) {\n    if (files.length <= 0)\n        return; // don't change\n    loadAtlasImageByUrl(URL.createObjectURL(files[0]));\n}\n/* atlas */\nfunction loadAtlasImageByUrl(url) {\n    var img = document.createElement(\"img\");\n    img.src = url;\n    img.onload = function () {\n        ATLAS_LAYER.setTileMapLength = img.width / ATLAS_LAYER.tileWidth;\n        ATLAS_LAYER.updateSize();\n        ATLAS_LAYER.draw();\n        ATLAS_LAYER.drawImage(img, 0, 0);\n        selectAtlasTileByCoordinate({ x: 0, y: 0 });\n    };\n}\n/* atlas */\nfunction enableDisabledDrawOrderIdx() {\n    ATLAS_MODE.drawIndexOrder = !ATLAS_MODE.drawIndexOrder;\n    ATLAS_IDX_LAYER.draw();\n}\n/* atlas */\nfunction enableDisabledDrawGrid() {\n    ATLAS_MODE.drawGrid = !ATLAS_MODE.drawGrid;\n    ATLAS_GRID_LAYER.draw();\n}\n/* atlas */\nfunction changeAtlasModeDrawOrderIdx() {\n    ATLAS_MODE.modeDrawOrderIndex = ATLAS_MODE.modeDrawOrderIndex < 7\n        ? ATLAS_MODE.modeDrawOrderIndex + 1\n        : 0;\n    var x = ATLAS_MODE.currIndexTileSelected % ATLAS_LAYER.tileMapLength;\n    var y = Math.floor(ATLAS_MODE.currIndexTileSelected / ATLAS_LAYER.tileMapLength);\n    ATLAS_MODE.currIndexTileSelected = ATLAS_LAYER\n        .getDrawTileIndexByMode(ATLAS_MODE.modeDrawOrderIndex)(x, y);\n    ATLAS_IDX_LAYER.draw();\n}\n/* atlas */\nfunction selectAtlasTileByIndex(index) {\n    var x = index % ATLAS_LAYER.tileMapLength;\n    var y = Math.floor(index / ATLAS_LAYER.tileMapLength);\n    selectAtlasTileByCoordinate({ x: x, y: y });\n}\n/* atlas */\nfunction selectAtlasTileByCoordinate(pos) {\n    ATLAS_MODE.coordinateTileSelected = pos;\n    ATLAS_MODE.currIndexTileSelected = ATLAS_LAYER\n        .getDrawTileIndexByMode(ATLAS_MODE.modeDrawOrderIndex)(pos.x, pos.y);\n    ATLAS_SELECTOR_LAYER.draw();\n    BUFFER_ONE_TILE.draw(ATLAS_LAYER.canvas, ATLAS_MODE.coordinateTileSelected.x * ATLAS_LAYER.tileWidth, ATLAS_MODE.coordinateTileSelected.y * ATLAS_LAYER.tileWidth, ATLAS_LAYER.tileWidth, ATLAS_LAYER.tileWidth, ATLAS_LAYER.tileWidth, ATLAS_LAYER.tileWidth);\n}\n/* atlas */\nfunction resizeAtlasTileSize(value) {\n    var size = parseInt(value);\n    ATLAS_LAYERS.foreach(function (layer) {\n        layer.setTileWidth = size;\n        layer.setTileMapLength = ATLAS_LAYER.tileMapWidth / size;\n        if (layer.ignored) {\n            layer.updateSize();\n            layer.clear();\n            layer.draw();\n        }\n    });\n    selectAtlasTileByCoordinate({ x: 0, y: 0 });\n}\n/*----------------------------------------------------------*/\n/* tilemap */\nfunction resizeTilemaChunk(value) {\n    var size = parseInt(value);\n    console.log(\"not implemetend\");\n}\n/* tilemap */\nfunction resizeTilemapTileSize(value) {\n    var size = parseInt(value);\n    TILEMAP_LAYERS.foreach(function (layer) {\n        if (!layer.ignored) {\n            layer.copy(function (copy) {\n                layer.setTileWidth = size;\n                layer.updateSize();\n                layer.draw();\n                layer.drawImage(copy, 0, 0);\n                layer.parseGrid();\n            });\n        }\n        else {\n            layer.setTileWidth = size;\n            layer.updateSize();\n            layer.draw();\n        }\n    });\n}\n/* tilemap */\nfunction resizeTilemapWidth(value) {\n    var size = parseInt(value);\n    if (size > 150) {\n        alert(\"a size larger than 300x300 may create a freeze/bug\");\n    }\n    TILEMAP_LAYERS.foreach(function (layer) {\n        if (!layer.ignored) {\n            layer.copy(function (copy) {\n                layer.setTileMapLength = size;\n                layer.updateSize();\n                layer.draw();\n                layer.drawImage(copy, 0, 0);\n                layer.parseGrid();\n            });\n        }\n        else {\n            layer.setTileMapLength = size;\n            layer.updateSize();\n            layer.draw();\n        }\n    });\n}\n/* tilemap */\nfunction importTilemap(files) {\n    if (files.length <= 0)\n        return; // don't change\n    var firstFile = files[0];\n    if (confirm(\"the tilemap will be resized and reinitialized, please confirm import\")) {\n        console.warn(\"not implemented\");\n    }\n}\n/* tilemap */\nfunction exportTilemap() {\n    var a = document.createElement('a');\n    a.style.display = 'none';\n    a.download = 'tilemap_data.json';\n    a.href = \"data:text/json;charset=utf-8,\" + encodeURIComponent(TILEMAP_LAYERS.export());\n    a.click();\n}\n\n\n//# sourceURL=webpack://tilesmap/./src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;